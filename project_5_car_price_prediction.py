# -*- coding: utf-8 -*-
"""Project 5. Car Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_D5zpSqIaVKBSyS5ekXvJ0K1POTp-L41

Importing the dependencies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data Collection and Processing"""

# loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('/content/car data.csv')

# looking the first five rows of dataframe
car_dataset.head()

# checking the number of rows and columns
car_dataset.shape

# getting some information about the dataset
car_dataset.info()

# checking the distribution of catagorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the catagorical data"""

# encoding 'Fuel type' column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}}, inplace=True)

# encoding 'Seller_Type' column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}}, inplace=True)

# encoding 'Transmission' column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}}, inplace=True)

car_dataset.head()

"""Splitting the data and target"""

X = car_dataset.drop(['Selling_Price','Car_Name'],axis=1)
Y = car_dataset['Selling_Price']

print(X)
print(Y)

"""Splitting Training and Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size=0.1, random_state=2)

"""Model Training

1. Linear Regression
"""

# loading the linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction = lin_reg_model.predict(X_train)

# R squared Error
error_score = metrics.r2_score(Y_train,training_data_prediction)
print('R square Error:', error_score)

"""Visualize the Actual Prices and Predicted Prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# prediction on test data
test_data_prediction = lin_reg_model.predict(X_test)

# R squared Error
error_score1 = metrics.r2_score(Y_test,test_data_prediction)
print('R square Error:', error_score1)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

"""2. Lasso Regression"""



# loading the linear regression model
las_reg_model = Lasso()

las_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction = las_reg_model.predict(X_train)

# R squared Error
error_score = metrics.r2_score(Y_train,training_data_prediction)
print('R square Error:', error_score)

"""Visualize the Actual Prices and Predicted Prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# prediction on test data
test_data_prediction = las_reg_model.predict(X_test)

# R squared Error
error_score1 = metrics.r2_score(Y_test,test_data_prediction)
print('R square Error:', error_score1)

plt.scatter(Y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

